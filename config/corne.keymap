#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/*                KEY POSITIONS
             0   1   2   3   4   5      6   7   8   9   10  11
             12  13  14  15  16  17     18  19  20  21  22  23
             24  25  26  27  28  29     30  31  32  33  34  35
                         36  37  38     39  40  41            */
/* Key Position Groups */

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29  // left-hand keys
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 // right-hand keys
#define THUMBS 36 37 38 39 40 41                      // thumb keys

// Keymap configuration (Colemak-DHm)

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
        mtl_mo: mod_tap_left_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT_MO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
        mtr_mo: mod_tap_right_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT_MO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
        };

        left_braces {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        left_parent {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        right_parent {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 20>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <20 31>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <14 15>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <13 14>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <16 17>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <18 19>;
        };

        times {
            bindings = <&kp ASTERISK>;
            key-positions = <28 29>;
        };

        tilda {
            bindings = <&kp TILDE>;
            key-positions = <24 25>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <14 3>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };

        choose_ide_left {
            bindings = <&kp LS(LG(LEFT_ARROW))>;
            key-positions = <16 38>;
        };

        choose_ide_right {
            bindings = <&kp RS(RG(RIGHT))>;
            key-positions = <39 19>;
        };
    };

    macros {
        Trial: Trial {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "TRIAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            // | ESC          |  Q           | W          |  F          |  P             |  B               | # |  J           |  L             |  U          |  Y          |  ;           |  play/pauyse    |
            // | TAB          |  CTRL / A    | ALT / R    |  GUI / S    |  SHIFT / T     |  G               | # |  M           |  SHIFT / N     |  GUI  / E   |  ALT / I    |  CTRL / O    |  '              |
            // | Prev         |  Z           |  X         |  C          |  D             |  V               | # |  K           |  H             |  ,          |  .          |  /           |  Next           |
            //                                            |  `          |  BKSP          |  RSA / LGUI      | # |  LWR / ENT   |  SPC           |             |

            bindings = <
&kp ESC    &kp Q            &kp W        &kp F                &kp P         &kp B                       &kp J            &kp L          &kp U                 &kp Y        &kp SEMI          &kp DOLLAR
&kp TAB    &mtl LEFT_GUI A  &mtl LALT R  &mtl LEFT_CONTROL S  &mtl LSHFT T  &kp G                       &kp M            &mtr RSHIFT N  &mtr RIGHT_CONTROL E  &mtr RALT I  &mtr RIGHT_GUI O  &kp SQT
&kp GRAVE  &kp Z            &kp X        &kp C                &kp D         &kp V                       &kp K            &kp H          &kp COMMA             &kp DOT      &kp FSLH          &kp CARET
                                         &kp EXCLAMATION      &kp BKSP      &mtl_mo 2 LS(LEFT_SHIFT)    &mtr_mo 1 ENTER  &kp SPACE      &kp BSLH
            >;
        };

        lower_layer {
            // ----------------------------------------------------------------------------------------------------
            // |  F1  |  F2  |  F3  |  F4   |  F5  |  {    | # |  }  |  -   |  =  |     |       |  EP_ON   |
            // |  F6  |  F7  |  F8  |  F9   |  F10 |  ()   | # | ()  |      |     |     |       |  BTCLR   |
            // |      |      |      |       |      |  {}   | # | []  |      |     |     |       |  BT1     |
            //                      |       |      | ESC   | # | ENT |      |     |

            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans  &trans     &trans     &trans      &trans            &trans      &trans  &ext_power EP_ON
&kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans     &trans     &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &trans  &bt BT_CLR
&kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans     &trans     &trans      &trans            &trans      &trans  &bt BT_SEL 0
                         &trans  &trans  &kp ESC    &kp ENTER  &trans      &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  | # |  6    |  7   |  8   |  9    |   0    |      |
            // |    |     |     |     |     | TAB | # |       | LFT  | DOWN |  UP   |  RIGHT |      |
            // |    |  `  |     |     |     |     | # |  :    |   '  |  ?   |   \   |        |      |
            //                  |     |     |     | # | ENTER |      |      |

            bindings = <
&trans  &kp N7            &kp N8            &kp N9         &trans          &trans    &trans     &trans    &kp UP_ARROW  &trans     &trans  &trans
&kp N0  &mtl LEFT_GUI N4  &mtl LEFT_ALT N5  &mtl LCTRL N6  &kp LEFT_SHIFT  &trans    &trans     &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans
&trans  &kp N1            &kp N2            &kp N3         &trans          &trans    &trans     &trans    &trans        &trans     &trans  &trans
                                            &trans         &trans          &trans    &kp ENTER  &trans    &trans
            >;
        };
    };
};
